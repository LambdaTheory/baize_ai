#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂõæÁâáÁîªÂªäÁõ∏ÂÖ≥ÁªÑ‰ª∂
"""

import os
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QApplication
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QPixmap

from qfluentwidgets import (EditableComboBox, CardWidget, SmoothScrollArea, 
                           FlowLayout, TitleLabel, BodyLabel, PushButton, ComboBox,
                           InfoBar, InfoBarPosition)

from .fluent_styles import FluentTheme, FluentIcons, FluentColors, FluentSpacing


class HighlightEditableComboBox(EditableComboBox):
    """ÊîØÊåÅÈ´ò‰∫ÆÂåπÈÖçÊñáÊú¨ÁöÑÂèØÁºñËæë‰∏ãÊãâÊ°Ü"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.original_items = []
        self._filter_updating = False  # Ê∑ªÂä†ËøáÊª§Êõ¥Êñ∞Ê†áÂøó‰Ωç
        # ÊöÇÊó∂‰∏çËøûÊé•‰ø°Âè∑ÔºåÂú®Â§ñÈÉ®ÊâãÂä®ËøûÊé•
    
    def setup_filter_connection(self):
        """ËÆæÁΩÆËøáÊª§ËøûÊé•ÔºàÁî±Â§ñÈÉ®Ë∞ÉÁî®Ôºâ"""
        try:
            # Â∞ùËØï‰ΩøÁî®lineEditÊñπÊ≥ï
            if hasattr(self, 'lineEdit') and callable(getattr(self, 'lineEdit')):
                line_edit = self.lineEdit()
                if line_edit and hasattr(line_edit, 'textChanged'):
                    line_edit.textChanged.connect(self.filter_items)
        except Exception as e:
            print(f"ËÆæÁΩÆËøáÊª§ËøûÊé•Â§±Ë¥•: {e}")
    
    def addItems(self, items):
        """Ê∑ªÂä†È°πÁõÆ"""
        if self._filter_updating:
            return
        self.original_items = items.copy()
        super().addItems(items)
    
    def filter_items(self, text):
        """Ê†πÊçÆËæìÂÖ•ÊñáÊú¨ËøáÊª§È°πÁõÆ"""
        if self._filter_updating:
            return
            
        self._filter_updating = True
        try:
            if not text:
                # Â¶ÇÊûúÊ≤°ÊúâËæìÂÖ•ÔºåÊòæÁ§∫ÊâÄÊúâÈ°πÁõÆ
                self.clear()
                super().addItems(self.original_items)
                return
            
            # ËøáÊª§ÂåπÈÖçÁöÑÈ°πÁõÆ
            filtered_items = []
            text_lower = text.lower()
            
            for item in self.original_items:
                if text_lower in item.lower():
                    filtered_items.append(item)
            
            # Êõ¥Êñ∞‰∏ãÊãâÊ°ÜÂÜÖÂÆπ
            current_text = text
            self.clear()
            super().addItems(filtered_items)
            
            # ÊÅ¢Â§çËæìÂÖ•ÁöÑÊñáÊú¨
            try:
                if hasattr(self, 'lineEdit') and callable(getattr(self, 'lineEdit')):
                    line_edit = self.lineEdit()
                    if line_edit:
                        line_edit.setText(current_text)
                elif hasattr(self, 'setCurrentText'):
                    self.setCurrentText(current_text)
            except:
                pass
        except Exception as e:
            print(f"ËøáÊª§È°πÁõÆÊó∂Âá∫Èîô: {e}")
        finally:
            self._filter_updating = False


class FluentImageCard(CardWidget):
    """Fluent Design ÂõæÁâáÂç°ÁâáÁªÑ‰ª∂"""
    clicked = pyqtSignal(dict)
    
    def __init__(self, record_data, parent=None, card_width=240):
        super().__init__(parent)
        self.record_data = record_data
        self.card_width = card_width  # ÊîØÊåÅÂä®ÊÄÅÂÆΩÂ∫¶
        self.init_ui()
        self.setup_animations()
        
    def init_ui(self):
        """ÂàùÂßãÂåñÂç°ÁâáUI"""
        # ËÆæÁΩÆÊúÄÂ∞èÂ§ßÂ∞èÂíåÂõ∫ÂÆöÈ´òÂ∫¶ÔºåÂÆΩÂ∫¶Ëá™ÈÄÇÂ∫î
        self.setMinimumSize(self.card_width, 360)
        self.setMaximumHeight(360)
        # ËÆæÁΩÆÂ§ßÂ∞èÁ≠ñÁï•‰∏∫Ê∞¥Âπ≥Êâ©Â±ïÔºåÂûÇÁõ¥Âõ∫ÂÆö
        from PyQt5.QtWidgets import QSizePolicy
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.setBorderRadius(20)
        
        # ‰∏ªÂ∏ÉÂ±Ä
        layout = QVBoxLayout()
        layout.setContentsMargins(FluentSpacing.MD, FluentSpacing.MD, 
                                 FluentSpacing.MD, FluentSpacing.MD)
        layout.setSpacing(FluentSpacing.SM)
        
        # ÂõæÁâáÈ¢ÑËßà
        self.image_label = QLabel()
        # ÂõæÁâáÂÆΩÂ∫¶Ê†πÊçÆÂç°ÁâáÂÆΩÂ∫¶Âä®ÊÄÅË∞ÉÊï¥
        image_width = self.card_width - 32  # ÂáèÂéªËæπË∑ù
        self.image_label.setMinimumSize(image_width, 170)
        self.image_label.setMaximumSize(16777215, 170)  # ÂÆΩÂ∫¶‰∏çÈôêÂà∂ÔºåÈ´òÂ∫¶Âõ∫ÂÆö
        self.image_label.setAlignment(Qt.AlignCenter)
        # ËÆæÁΩÆÂõæÁâáÈ¢ÑËßàÁöÑÂ§ßÂ∞èÁ≠ñÁï•
        self.image_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.image_label.setStyleSheet(f"""
            QLabel {{
                border: none;
                border-radius: 16px;
                background-color: {FluentColors.get_color('bg_secondary')};
                color: {FluentColors.get_color('text_tertiary')};
            }}
        """)
        
        # Âä†ËΩΩÂõæÁâá
        file_path = self.record_data.get('file_path', '')
        if os.path.exists(file_path):
            pixmap = QPixmap(file_path)
            if not pixmap.isNull():
                scaled_pixmap = pixmap.scaled(image_width, 170, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.image_label.setPixmap(scaled_pixmap)
                self.image_label.setStyleSheet(f"""
                    QLabel {{
                        border: none;
                        border-radius: 16px;
                        background-color: {FluentColors.get_color('bg_primary')};
                    }}
                """)
            else:
                self.image_label.setText("üñºÔ∏è\nÂõæÁâáÊó†Ê≥ïÂä†ËΩΩ")
                self.image_label.setStyleSheet(f"""
                    QLabel {{
                        border: 2px dashed {FluentColors.get_color('border_primary')};
                        border-radius: 16px;
                        background-color: {FluentColors.get_color('bg_secondary')};
                        color: {FluentColors.get_color('text_tertiary')};
                        font-size: 14px;
                    }}
                """)
        else:
            self.image_label.setText("‚ùå\nÂõæÁâá‰∏çÂ≠òÂú®")
            self.image_label.setStyleSheet(f"""
                QLabel {{
                    border: 2px dashed {FluentColors.get_color('error')};
                    border-radius: 16px;
                    background-color: rgba(239, 68, 68, 0.05);
                    color: {FluentColors.get_color('error')};
                    font-size: 14px;
                }}
            """)
        
        # Êñá‰ª∂Âêç
        file_name = self.record_data.get('custom_name') or self.record_data.get('file_name', 'Êú™Áü•')
        if len(file_name) > 28:
            file_name = file_name[:25] + "..."
        name_label = QLabel(file_name)
        name_label.setStyleSheet(f"""
            QLabel {{
                font-weight: 600;
                font-size: 16px;
                color: {FluentColors.get_color('text_primary')};
                border: none;
                background: transparent;
                padding: 8px 4px 4px 4px;
            }}
        """)
        name_label.setWordWrap(True)
        
        # Ê®°Âûã‰ø°ÊÅØ
        model = self.record_data.get('model', 'Êú™Áü•Ê®°Âûã')
        if not model or model.strip() == '':
            model = 'Êú™Áü•Ê®°Âûã'
        if len(model) > 35:
            model = model[:32] + "..."
        model_label = QLabel(f"üé® {model}")
        model_label.setStyleSheet(f"""
            QLabel {{
                font-size: 13px;
                color: {FluentColors.get_color('text_secondary')};
                border: none;
                background: transparent;
                padding: 2px 4px;
            }}
        """)
        
        # Ê†áÁ≠æ‰ø°ÊÅØ
        tags = self.record_data.get('tags', '').strip()
        if tags:
            # ÈôêÂà∂Ê†áÁ≠æÊòæÁ§∫ÈïøÂ∫¶ÔºåÈÅøÂÖçÂç°ÁâáËøáÈ´ò
            if len(tags) > 30:
                tags_display = tags[:27] + "..."
            else:
                tags_display = tags
            tags_label = QLabel(f"üè∑Ô∏è {tags_display}")
        else:
            tags_label = QLabel("üè∑Ô∏è ÊöÇÊó†Ê†áÁ≠æ")
        
        tags_label.setStyleSheet(f"""
            QLabel {{
                font-size: 12px;
                color: {FluentColors.get_color('text_tertiary')};
                border: none;
                background: transparent;
                padding: 2px 4px;
            }}
        """)
        tags_label.setWordWrap(True)
        
        # LoRA‰ø°ÊÅØ
        lora_info = self.record_data.get('lora_info', '')
        if lora_info:
            try:
                import json
                lora_display = ""
                if isinstance(lora_info, str) and lora_info.strip():
                    lora_data = json.loads(lora_info)
                    if isinstance(lora_data, dict) and 'loras' in lora_data and lora_data['loras']:
                        # Ê≠£Á°ÆÁöÑLoRAÊï∞ÊçÆÁªìÊûÑ
                        lora_names = []
                        for lora in lora_data['loras']:
                            if isinstance(lora, dict) and 'name' in lora:
                                name = lora.get('name', 'Êú™Áü•')
                                weight = lora.get('weight', 1.0)
                                lora_names.append(f"{name}({weight})")
                        
                        if lora_names:
                            # ÈôêÂà∂ÊòæÁ§∫ÁöÑLoRAÊï∞ÈáèÔºåÈÅøÂÖçÂç°ÁâáËøáÈ´ò
                            if len(lora_names) > 2:
                                lora_display = ", ".join(lora_names[:2]) + f"Á≠â{len(lora_names)}‰∏™"
                            else:
                                lora_display = ", ".join(lora_names)
                    elif isinstance(lora_data, dict):
                        # Â§áÁî®Ê†ºÂºè
                        lora_items = []
                        for name, weight in lora_data.items():
                            if name != 'loras':
                                lora_items.append(f"{name}({weight})")
                                if len(lora_items) >= 2:
                                    break
                        lora_display = ", ".join(lora_items)
                
                if lora_display:
                    # ÈôêÂà∂LoRAÊòæÁ§∫ÈïøÂ∫¶
                    if len(lora_display) > 25:
                        lora_display = lora_display[:22] + "..."
                    lora_label = QLabel(f"üéØ {lora_display}")
                else:
                    lora_label = QLabel("üéØ ÊöÇÊó†LoRA")
            except Exception as e:
                lora_label = QLabel("üéØ LoRAËß£ÊûêÈîôËØØ")
        else:
            lora_label = QLabel("üéØ ÊöÇÊó†LoRA")
        
        lora_label.setStyleSheet(f"""
            QLabel {{
                font-size: 12px;
                color: {FluentColors.get_color('text_tertiary')};
                border: none;
                background: transparent;
                padding: 2px 4px;
            }}
        """)
        lora_label.setWordWrap(True)
        
        # ÂàõÂª∫Êó∂Èó¥
        created_at = self.record_data.get('created_at', '')
        if created_at:
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(created_at.replace('T', ' '))
                time_str = dt.strftime('%m-%d %H:%M')
            except:
                time_str = created_at[:16]
        else:
            time_str = 'Êú™Áü•Êó∂Èó¥'
        
        time_label = QLabel(f"‚è∞ {time_str}")
        time_label.setStyleSheet(f"""
            QLabel {{
                font-size: 12px;
                color: {FluentColors.get_color('text_tertiary')};
                border: none;
                background: transparent;
                padding: 2px 4px;
            }}
        """)
        
        layout.addWidget(self.image_label)
        layout.addWidget(name_label)
        layout.addWidget(model_label)
        layout.addWidget(tags_label)
        layout.addWidget(lora_label)
        layout.addWidget(time_label)
        layout.addStretch()
        
        self.setLayout(layout)
        
    def setup_animations(self):
        """ËÆæÁΩÆÂä®ÁîªÊïàÊûú"""
        # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†Êõ¥Â§çÊùÇÁöÑÂä®ÁîªÊïàÊûú
        pass
    
    def resizeEvent(self, event):
        """Âç°ÁâáÂ§ßÂ∞èÊîπÂèòÊó∂Êõ¥Êñ∞ÂõæÁâáÂ∞∫ÂØ∏"""
        super().resizeEvent(event)
        # Âä®ÊÄÅË∞ÉÊï¥ÂõæÁâáÈ¢ÑËßàÂ§ßÂ∞è
        if hasattr(self, 'image_label') and self.image_label.pixmap():
            current_width = self.width() - 32  # ÂáèÂéªËæπË∑ù
            if current_width > 0:
                self.update_image_size(current_width)
    
    def update_image_size(self, new_width):
        """Êõ¥Êñ∞ÂõæÁâáÊòæÁ§∫Â∞∫ÂØ∏"""
        if not hasattr(self, 'image_label') or not self.image_label.pixmap():
            return
        
        try:
            file_path = self.record_data.get('file_path', '')
            if os.path.exists(file_path):
                pixmap = QPixmap(file_path)
                if not pixmap.isNull():
                    scaled_pixmap = pixmap.scaled(new_width, 170, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                    self.image_label.setPixmap(scaled_pixmap)
        except Exception as e:
            print(f"Êõ¥Êñ∞ÂõæÁâáÂ∞∫ÂØ∏Êó∂Âá∫Èîô: {e}")
    
    def enterEvent(self, event):
        """Èº†Ê†áËøõÂÖ•‰∫ã‰ª∂"""
        self.setStyleSheet(f"""
            CardWidget {{
                background-color: {FluentColors.get_color('bg_secondary')};
                border: 2px solid {FluentColors.get_color('primary')};
            }}
        """)
        super().enterEvent(event)
    
    def leaveEvent(self, event):
        """Èº†Ê†áÁ¶ªÂºÄ‰∫ã‰ª∂"""
        self.setStyleSheet(f"""
            CardWidget {{
                background-color: {FluentColors.get_color('bg_primary')};
                border: 1px solid {FluentColors.get_color('border_primary')};
            }}
        """)
        super().leaveEvent(event)
    
    def mousePressEvent(self, event):
        """Èº†Ê†áÊåâ‰∏ã‰∫ã‰ª∂"""
        if event.button() == Qt.LeftButton:
            self.setStyleSheet(f"""
                CardWidget {{
                    background-color: {FluentColors.get_color('bg_tertiary')};
                    border: 2px solid {FluentColors.get_color('primary')};
                }}
            """)
        super().mousePressEvent(event)
        
    def mouseReleaseEvent(self, event):
        """Èº†Ê†áÈáäÊîæ‰∫ã‰ª∂"""
        if event.button() == Qt.LeftButton:
            # ÂèëÂá∫Êàë‰ª¨Ëá™ÂÆö‰πâÁöÑ‰ø°Âè∑ÔºåÂ∏¶ÂèÇÊï∞
            self.clicked.emit(self.record_data)
        # ‰∏çË∞ÉÁî®Áà∂Á±ªÁöÑ mouseReleaseEventÔºåÈÅøÂÖçÂèëÂá∫Êó†ÂèÇÊï∞ÁöÑ clicked ‰ø°Âè∑


class FluentGalleryWidget(SmoothScrollArea):
    """Fluent Design ÂõæÁâáÁîªÂªäÁªÑ‰ª∂"""
    record_selected = pyqtSignal(dict)
    
    def __init__(self, data_manager, parent=None):
        super().__init__(parent)
        self.data_manager = data_manager
        self.all_records = []
        self.filtered_records = []
        self.current_filter_field = ""
        self.current_filter_value = ""
        self._updating_filters = False  # Ê∑ªÂä†Ê†áÂøó‰ΩçÈò≤Ê≠¢ÈÄíÂΩí
        self.current_card_width = 240  # ÂΩìÂâçÂç°ÁâáÂÆΩÂ∫¶
        self.init_ui()
        self.load_records()
        
    def init_ui(self):
        """ÂàùÂßãÂåñUI"""
        self.setWidgetResizable(True)
        self.setStyleSheet("QScrollArea { border: none; background: transparent; }")
        
        # ‰∏ªÂÆπÂô®
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(FluentSpacing.LG, FluentSpacing.LG, 
                                     FluentSpacing.LG, FluentSpacing.LG)
        main_layout.setSpacing(FluentSpacing.LG)
        
        # Ê†áÈ¢òÂíåÊìç‰ΩúÂå∫Âüü
        header_card = CardWidget()
        header_card.setBorderRadius(16)
        header_layout = QVBoxLayout()
        header_layout.setContentsMargins(FluentSpacing.LG, FluentSpacing.MD, 
                                       FluentSpacing.LG, FluentSpacing.MD)
        
        # Á¨¨‰∏ÄË°åÔºöÊ†áÈ¢òÂíåÂà∑Êñ∞ÊåâÈíÆ
        title_row = QHBoxLayout()
        
        # Ê†áÈ¢ò
        title_label = TitleLabel("üñºÔ∏è ÂõæÁâáËÆ∞ÂΩïÁîªÂªä")
        title_label.setStyleSheet(f"color: {FluentColors.get_color('text_primary')};")
        
        # Âà∑Êñ∞ÊåâÈíÆ
        self.refresh_btn = PushButton("Âà∑Êñ∞")
        self.refresh_btn.setFixedHeight(36)
        self.refresh_btn.clicked.connect(self.load_records)
        
        title_row.addWidget(title_label)
        title_row.addStretch()
        title_row.addWidget(self.refresh_btn)
        
        # Á¨¨‰∫åË°åÔºöÁ≠õÈÄâÂô®
        filter_row = QHBoxLayout()
        filter_row.setSpacing(FluentSpacing.MD)
        
        # Á≠õÈÄâÂ≠óÊÆµÊ†áÁ≠æ
        filter_label = BodyLabel("Á≠õÈÄâ:")
        filter_label.setStyleSheet(f"color: {FluentColors.get_color('text_primary')};")
        
        # Á¨¨‰∏Ä‰∏™‰∏ãÊãâÊ°ÜÔºöÁ≠õÈÄâÂ≠óÊÆµ
        self.field_combo = ComboBox()
        self.field_combo.addItems(["ÂÖ®ÈÉ®", "Ê®°Âûã", "LoRA", "Ê†áÁ≠æ"])
        self.field_combo.setFixedWidth(120)
        self.field_combo.currentTextChanged.connect(self.on_field_changed)
        
        # Á¨¨‰∫å‰∏™‰∏ãÊãâÊ°ÜÔºöÁ≠õÈÄâÂÄº
        self.value_combo = HighlightEditableComboBox()
        self.value_combo.setFixedWidth(200)
        self.value_combo.setPlaceholderText("ËæìÂÖ•ÊàñÈÄâÊã©Á≠õÈÄâÂÄº...")
        self.value_combo.currentTextChanged.connect(self.on_value_changed)
        # ÊöÇÊó∂‰∏çËøûÊé•lineEditÁöÑtextChanged‰ø°Âè∑ÔºåÈÅøÂÖçÈÄíÂΩí
        
        # Ê∏ÖÈô§Á≠õÈÄâÊåâÈíÆ
        self.clear_filter_btn = PushButton("Ê∏ÖÈô§Á≠õÈÄâ")
        self.clear_filter_btn.setFixedHeight(32)
        self.clear_filter_btn.clicked.connect(self.clear_filters)
        
        filter_row.addWidget(filter_label)
        filter_row.addWidget(self.field_combo)
        filter_row.addWidget(self.value_combo)
        filter_row.addWidget(self.clear_filter_btn)
        filter_row.addStretch()
        
        header_layout.addLayout(title_row)
        header_layout.addLayout(filter_row)
        header_card.setLayout(header_layout)
        
        # ÂõæÁâáÁΩëÊ†ºÂÆπÂô®
        self.grid_widget = QWidget()
        from PyQt5.QtWidgets import QGridLayout
        self.grid_layout = QGridLayout()
        self.grid_layout.setSpacing(FluentSpacing.MD)
        self.grid_layout.setContentsMargins(FluentSpacing.MD, FluentSpacing.MD, 
                                           FluentSpacing.MD, FluentSpacing.MD)
        # ËÆæÁΩÆÁΩëÊ†ºÂ∏ÉÂ±ÄÂ±ûÊÄß
        self.grid_layout.setVerticalSpacing(FluentSpacing.MD)
        self.grid_layout.setHorizontalSpacing(FluentSpacing.MD)
        self.grid_widget.setLayout(self.grid_layout)
        
        # Â≠òÂÇ®ÂΩìÂâçÁöÑË°åÂàóÊï∞
        self.current_columns = 4  # ÈªòËÆ§4Âàó
        self.current_rows = 0
        
        main_layout.addWidget(header_card)
        main_layout.addWidget(self.grid_widget, 1)  # ËÆ©ÁΩëÊ†ºÂÆπÂô®Âç†Áî®ÊâÄÊúâÂèØÁî®Á©∫Èó¥
        
        main_widget.setLayout(main_layout)
        self.setWidget(main_widget)
        
    def resizeEvent(self, event):
        """Á™óÂè£Â§ßÂ∞èÊîπÂèò‰∫ã‰ª∂ÔºåÂä®ÊÄÅË∞ÉÊï¥Âç°ÁâáÂ§ßÂ∞è"""
        super().resizeEvent(event)
        self.update_card_layout()
    
    def update_card_layout(self):
        """Êõ¥Êñ∞Âç°ÁâáÂ∏ÉÂ±ÄÔºåÂÆûÁé∞ÂìçÂ∫îÂºèËÆæËÆ°"""
        if not hasattr(self, 'grid_widget') or not self.grid_widget:
            return
            
        # Ëé∑ÂèñÂèØÁî®ÂÆΩÂ∫¶
        available_width = self.width() - 60  # ÂáèÂéªËæπË∑ùÂíåÊªöÂä®Êù°
        
        # ËÆ°ÁÆóÊúÄ‰Ω≥ÂàóÊï∞
        min_card_width = 200  # ÊúÄÂ∞èÂç°ÁâáÂÆΩÂ∫¶
        max_card_width = 300  # ÊúÄÂ§ßÂç°ÁâáÂÆΩÂ∫¶
        spacing = 16          # Âç°ÁâáÈó¥Ë∑ù
        
        # ËÆ°ÁÆóÊúÄ‰Ω≥ÂàóÊï∞Ôºà2-6ÂàóÔºâ
        best_columns = 4  # ÈªòËÆ§4Âàó
        for columns in range(6, 1, -1):  # ‰ªé6ÂàóÂà∞2Âàó
            total_spacing = (columns - 1) * spacing + 32  # Âä†‰∏äÂ∑¶Âè≥ËæπË∑ù
            card_width = (available_width - total_spacing) / columns
            
            if card_width >= min_card_width:
                best_columns = columns
                # ÈôêÂà∂ÊúÄÂ§ßÂÆΩÂ∫¶
                if card_width > max_card_width:
                    card_width = max_card_width
                break
        
        # Â¶ÇÊûúÂàóÊï∞ÂèëÁîüÂèòÂåñÔºåÈáçÊñ∞Â∏ÉÂ±Ä
        if self.current_columns != best_columns:
            self.current_columns = best_columns
            # ËÆ°ÁÆóÊñ∞ÁöÑÂç°ÁâáÂÆΩÂ∫¶ÔºàÂπ≥ÂàÜÂèØÁî®ÂÆΩÂ∫¶Ôºâ
            total_spacing = (best_columns - 1) * spacing + 32
            self.current_card_width = (available_width - total_spacing) / best_columns
            # ÈôêÂà∂Âú®ÂêàÁêÜËåÉÂõ¥ÂÜÖ
            self.current_card_width = min(max(self.current_card_width, min_card_width), max_card_width)
            self.current_card_width = int(self.current_card_width)
            
            # ËÆæÁΩÆÂàóÁöÑÊãâ‰º∏Âõ†Â≠êÔºåÂÆûÁé∞Âπ≥ÂàÜÊïàÊûú
            for col in range(best_columns):
                self.grid_layout.setColumnStretch(col, 1)
            
            # Ê∏ÖÈô§Â§ö‰ΩôÂàóÁöÑÊãâ‰º∏Âõ†Â≠ê
            for col in range(best_columns, 6):
                self.grid_layout.setColumnStretch(col, 0)
                
            self.refresh_cards()
    
    def refresh_cards(self):
        """‰ΩøÁî®Êñ∞ÁöÑÂç°ÁâáÂÆΩÂ∫¶ÈáçÊñ∞ÂàõÂª∫ÊâÄÊúâÂç°Áâá"""
        if hasattr(self, 'filtered_records') and self.filtered_records:
            self.display_records(self.filtered_records)
        
    def load_records(self):
        """Âä†ËΩΩËÆ∞ÂΩï"""
        try:
            self.all_records = self.data_manager.get_all_records()
            self.filtered_records = self.all_records.copy()
            
            # ÈáçÁΩÆÁ≠õÈÄâÂô®
            self.current_filter_field = "ÂÖ®ÈÉ®"
            self.current_filter_value = ""
            if hasattr(self, 'field_combo'):
                self.field_combo.setCurrentIndex(0)
                self.value_combo.clear()
            
            self.display_records(self.filtered_records)
            
            print(f"Âä†ËΩΩÂÆåÊàê: ÂÖ±Âä†ËΩΩ {len(self.all_records)} Êù°ËÆ∞ÂΩï")
        except Exception as e:
            print(f"Âä†ËΩΩÂ§±Ë¥•: {str(e)}")
    
    def display_records(self, records):
        """ÊòæÁ§∫ËÆ∞ÂΩï"""
        # Êõ¥ÂÆâÂÖ®ÁöÑÊ∏ÖÁêÜÊñπÊ≥ï
        try:
            # ÊñπÊ≥ï1ÔºöÁõ¥Êé•Âà†Èô§ÊâÄÊúâÂ≠êwidget
            for i in reversed(range(self.grid_layout.count())):
                child = self.grid_layout.itemAt(i)
                if child:
                    widget = child.widget()
                    if widget:
                        self.grid_layout.removeWidget(widget)
                        widget.setParent(None)
                        widget.deleteLater()
        except Exception as e:
            print(f"Ê∏ÖÁêÜÂ∏ÉÂ±ÄÊó∂Âá∫Èîô: {e}")
            # Â§áÁî®Ê∏ÖÁêÜÊñπÊ≥ï
            try:
                while self.grid_layout.count():
                    item = self.grid_layout.takeAt(0)
                    if item and item.widget():
                        item.widget().deleteLater()
            except:
                pass
        
        # Âº∫Âà∂Â§ÑÁêÜ‰∫ã‰ª∂ÔºåÁ°Æ‰øùwidgetË¢´Âà†Èô§
        QApplication.processEvents()
        
        if not records:
            # ÊòæÁ§∫Á©∫Áä∂ÊÄÅ
            empty_card = CardWidget()
            empty_card.setBorderRadius(20)
            empty_card.setFixedSize(400, 200)
            
            empty_layout = QVBoxLayout()
            empty_layout.setAlignment(Qt.AlignCenter)
            
            icon_label = QLabel("üñºÔ∏è")
            icon_label.setAlignment(Qt.AlignCenter)
            icon_label.setStyleSheet(f"""
                QLabel {{
                    font-size: 48px;
                    color: {FluentColors.get_color('text_tertiary')};
                    background: transparent;
                    border: none;
                    padding: 20px;
                }}
            """)
            
            text_label = BodyLabel("ÊöÇÊó†ÂõæÁâáËÆ∞ÂΩï\n\nËØ∑ÂÖàÂú®‰ø°ÊÅØÊèêÂèñÈ°µÈù¢Â§ÑÁêÜ‰∏Ä‰∫õÂõæÁâá")
            text_label.setAlignment(Qt.AlignCenter)
            text_label.setStyleSheet(f"""
                BodyLabel {{
                    color: {FluentColors.get_color('text_secondary')};
                    background: transparent;
                    border: none;
                    line-height: 24px;
                }}
            """)
            
            empty_layout.addWidget(icon_label)
            empty_layout.addWidget(text_label)
            empty_card.setLayout(empty_layout)
            
            self.grid_layout.addWidget(empty_card)
            return
        
        # ÈáçÁΩÆË°åÊï∞
        self.current_rows = 0
        
        # ÂàõÂª∫ÂõæÁâáÂç°ÁâáÂπ∂ÊåâÁΩëÊ†ºÊéíÂàó
        for i, record in enumerate(records):
            try:
                card = FluentImageCard(record, self, self.current_card_width)
                card.clicked.connect(self.on_card_clicked)
                
                # ËÆ°ÁÆóË°åÂàó‰ΩçÁΩÆ
                row = i // self.current_columns
                col = i % self.current_columns
                
                # Ê∑ªÂä†Âà∞ÁΩëÊ†ºÂ∏ÉÂ±Ä
                self.grid_layout.addWidget(card, row, col)
                
                # Êõ¥Êñ∞Ë°åÊï∞
                if row >= self.current_rows:
                    self.current_rows = row + 1
                    
            except Exception as e:
                print(f"ÂàõÂª∫ÂõæÁâáÂç°ÁâáÊó∂Âá∫Èîô: {e}")
        
        # Âú®ÊúÄÂêé‰∏ÄË°åÊ∑ªÂä†Êãâ‰º∏ÔºåÁ°Æ‰øùÂç°ÁâáÈ°∂ÈÉ®ÂØπÈΩê
        if self.current_rows > 0:
            self.grid_layout.setRowStretch(self.current_rows, 1)
        
        # Âº∫Âà∂Êõ¥Êñ∞Â∏ÉÂ±Ä
        self.grid_widget.update()
        self.update()
    
    def on_card_clicked(self, record_data):
        """Âç°ÁâáÁÇπÂáª‰∫ã‰ª∂"""
        self.record_selected.emit(record_data)
    
    def on_field_changed(self, field_text):
        """Á≠õÈÄâÂ≠óÊÆµÊîπÂèòÊó∂ÁöÑÂ§ÑÁêÜ"""
        if self._updating_filters:
            return
        
        self._updating_filters = True
        try:
            self.current_filter_field = field_text
            self.update_value_options()
        finally:
            self._updating_filters = False
    
    def on_value_changed(self, value_text):
        """Á≠õÈÄâÂÄºÊîπÂèòÊó∂ÁöÑÂ§ÑÁêÜ"""
        if self._updating_filters:
            return
        
        self._updating_filters = True
        try:
            self.current_filter_value = value_text
            self.apply_filters()
        finally:
            self._updating_filters = False
    
    def update_value_options(self):
        """Êõ¥Êñ∞Á≠õÈÄâÂÄº‰∏ãÊãâÊ°ÜÁöÑÈÄâÈ°π"""
        # ‰ΩøÁî®blockSignals‰∏¥Êó∂ÈòªÊ≠¢‰ø°Âè∑ÂèëÂ∞Ñ
        self.value_combo.blockSignals(True)
        sorted_values = []  # Âú®Â§ñÈÉ®ÂÆö‰πâÂèòÈáè
        
        try:
            self.value_combo.clear()
            self.value_combo.original_items = []
            
            if not self.all_records or self.current_filter_field == "ÂÖ®ÈÉ®":
                # Â¶ÇÊûúÊòØ"ÂÖ®ÈÉ®"ÔºåÊ∏ÖÈô§Á≠õÈÄâÂÄºÂπ∂ÊòæÁ§∫ÊâÄÊúâËÆ∞ÂΩï
                self.current_filter_value = ""
                self.filtered_records = self.all_records.copy()
                self.display_records(self.filtered_records)
                return
            
            # Ê†πÊçÆÁ≠õÈÄâÂ≠óÊÆµËé∑ÂèñÊâÄÊúâÂèØËÉΩÁöÑÂÄº
            values = set()
            
            for record in self.all_records:
                if self.current_filter_field == "Ê®°Âûã":
                    model = record.get('model', '').strip()
                    if model:
                        values.add(model)
                elif self.current_filter_field == "LoRA":
                    lora_info = record.get('lora_info', '')
                    if lora_info:
                        # Ëß£ÊûêLoRA‰ø°ÊÅØ
                        try:
                            import json
                            if isinstance(lora_info, str) and lora_info.strip():
                                lora_data = json.loads(lora_info)
                                if isinstance(lora_data, dict) and 'loras' in lora_data:
                                    # Ê≠£Á°ÆÁöÑLoRAÊï∞ÊçÆÁªìÊûÑÔºö{"loras": [{"name": "xxx", "weight": 0.8}]}
                                    for lora_item in lora_data['loras']:
                                        if isinstance(lora_item, dict) and 'name' in lora_item:
                                            values.add(lora_item['name'])
                                elif isinstance(lora_data, dict):
                                    # Â§áÁî®ÔºöÁõ¥Êé•‰ªéÂ≠óÂÖ∏ÈîÆ‰∏≠Êü•Êâæ
                                    for key in lora_data.keys():
                                        if key != 'loras':  # ÈÅøÂÖçÊ∑ªÂä†'loras'Ëøô‰∏™ÈîÆÊú¨Ë∫´
                                            values.add(key)
                                elif isinstance(lora_data, list):
                                    # Â§áÁî®ÔºöÂ¶ÇÊûúÊòØÂàóË°®Ê†ºÂºè
                                    for lora_item in lora_data:
                                        if isinstance(lora_item, dict) and 'name' in lora_item:
                                            values.add(lora_item['name'])
                        except Exception as e:
                            print(f"Ëß£ÊûêLoRA‰ø°ÊÅØÂ§±Ë¥•: {e}")
                            # Â¶ÇÊûúÊòØÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ∞ùËØïÁõ¥Êé•Ëß£Êûê
                            if isinstance(lora_info, str):
                                values.add(lora_info)
                elif self.current_filter_field == "Ê†áÁ≠æ":
                    tags = record.get('tags', '').strip()
                    if tags:
                        # ÂàÜÂâ≤Ê†áÁ≠æÔºàÊîØÊåÅÈÄóÂè∑„ÄÅÂàÜÂè∑„ÄÅÁ©∫Ê†ºÂàÜÂâ≤Ôºâ
                        import re
                        tag_list = re.split(r'[,;ÔºåÔºõ\s]+', tags)
                        for tag in tag_list:
                            tag = tag.strip()
                            if tag:
                                values.add(tag)

            
            # ÊéíÂ∫èÂπ∂Ê∑ªÂä†Âà∞‰∏ãÊãâÊ°Ü
            sorted_values = sorted(list(values))
            self.value_combo.addItems(sorted_values)
            
        finally:
            # ÊÅ¢Â§ç‰ø°Âè∑ÂèëÂ∞Ñ
            self.value_combo.blockSignals(False)
        
        # Â¶ÇÊûúÊúâÈÄâÈ°πÔºåËá™Âä®ÈÄâÊã©Á¨¨‰∏Ä‰∏™Âπ∂Ëß¶ÂèëÁ≠õÈÄâ
        if sorted_values:
            # ËÆæÁΩÆÂΩìÂâçÈÄâ‰∏≠ÁöÑÂÄº
            self.current_filter_value = sorted_values[0]
            self.value_combo.setCurrentIndex(0)
            # ÊâãÂä®Ëß¶ÂèëÁ≠õÈÄâ
            print(f"Ëá™Âä®ÈÄâÊã©Á≠õÈÄâÂÄº: {self.current_filter_value}")
            self.apply_filters()
        else:
            # Â¶ÇÊûúÊ≤°ÊúâÈÄâÈ°πÔºåÊ∏ÖÈô§Á≠õÈÄâÂÄº
            self.current_filter_value = ""
            self.filtered_records = self.all_records.copy()
            self.display_records(self.filtered_records)
    
    def apply_filters(self):
        """Â∫îÁî®Á≠õÈÄâ"""
        if not self.all_records:
            return
        
        if self.current_filter_field == "ÂÖ®ÈÉ®" or not self.current_filter_value:
            self.filtered_records = self.all_records.copy()
        else:
            self.filtered_records = []
            filter_value_lower = self.current_filter_value.lower()
            
            for record in self.all_records:
                match = False
                
                if self.current_filter_field == "Ê®°Âûã":
                    model = record.get('model', '').lower()
                    match = filter_value_lower in model
                
                elif self.current_filter_field == "LoRA":
                    lora_info = record.get('lora_info', '')
                    if lora_info:
                        try:
                            import json
                            if isinstance(lora_info, str) and lora_info.strip():
                                lora_data = json.loads(lora_info)
                                if isinstance(lora_data, dict) and 'loras' in lora_data:
                                    # Ê≠£Á°ÆÁöÑLoRAÊï∞ÊçÆÁªìÊûÑÔºö{"loras": [{"name": "xxx", "weight": 0.8}]}
                                    for lora_item in lora_data['loras']:
                                        if isinstance(lora_item, dict) and 'name' in lora_item:
                                            if filter_value_lower in lora_item['name'].lower():
                                                match = True
                                                break
                                elif isinstance(lora_data, dict):
                                    # Â§áÁî®ÔºöÁõ¥Êé•‰ªéÂ≠óÂÖ∏ÈîÆ‰∏≠Êü•Êâæ
                                    for key in lora_data.keys():
                                        if key != 'loras':  # ÈÅøÂÖçÊ∑ªÂä†'loras'Ëøô‰∏™ÈîÆÊú¨Ë∫´
                                            if filter_value_lower in key.lower():
                                                match = True
                                                break
                                elif isinstance(lora_data, list):
                                    # Â§áÁî®ÔºöÂ¶ÇÊûúÊòØÂàóË°®Ê†ºÂºè
                                    for lora_item in lora_data:
                                        if isinstance(lora_item, dict) and 'name' in lora_item:
                                            if filter_value_lower in lora_item['name'].lower():
                                                match = True
                                                break
                        except Exception as e:
                            print(f"Ëß£ÊûêLoRA‰ø°ÊÅØÂ§±Ë¥•: {e}")
                            # Â¶ÇÊûúÊòØÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ∞ùËØïÁõ¥Êé•Ëß£Êûê
                            if isinstance(lora_info, str):
                                match = filter_value_lower in lora_info.lower()
                
                elif self.current_filter_field == "Ê†áÁ≠æ":
                    tags = record.get('tags', '').lower()
                    match = filter_value_lower in tags
                

                
                if match:
                    self.filtered_records.append(record)
        
        self.display_records(self.filtered_records)
        
        # Êõ¥Êñ∞Áä∂ÊÄÅ‰ø°ÊÅØÔºàÊöÇÊó∂ÁßªÈô§InfoBar‰ª•ÈÅøÂÖç‰∏ªÈ¢òÈóÆÈ¢òÔºâ
        if self.current_filter_field != "ÂÖ®ÈÉ®" and self.current_filter_value:
            print(f"Á≠õÈÄâÁªìÊûú: ÊâæÂà∞ {len(self.filtered_records)} Êù°ÂåπÈÖçËÆ∞ÂΩï")
    
    def clear_filters(self):
        """Ê∏ÖÈô§ÊâÄÊúâÁ≠õÈÄâ"""
        if self._updating_filters:
            return
            
        self._updating_filters = True
        try:
            self.field_combo.setCurrentIndex(0)  # ÈÄâÊã©"ÂÖ®ÈÉ®"
            self.value_combo.clear()
            self.current_filter_field = "ÂÖ®ÈÉ®"
            self.current_filter_value = ""
            self.filtered_records = self.all_records.copy()
            self.display_records(self.filtered_records)
        finally:
            self._updating_filters = False 